{
    "info": {
        "_postman_id": "a2a1d877-1b59-4191-9655-4799a1f8d4a1",
        "name": "BankingSystemAPI",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Auth",
            "description": "Authentication endpoints (login, refresh, logout, revoke tokens).",
            "item": [
                {
                    "name": "Login",
                    "description": "## POST /api/auth/login\n\nAuthenticates a user and returns a JWT token.\n\n### Request Body: `LoginReqDto`\n\n*   `email` (string, required): The user\'s email address.\n*   `password` (string, required): The user\'s password.\n\n### Responses\n\n*   `200 OK`: Login successful. Returns `AuthResDto`.\n*   `400 Bad Request`: Invalid login request.\n*   `401 Unauthorized`: Invalid credentials.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"super.admin@example.com\",\n  \"password\": \"SuperAdmin#2025\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "login"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Refresh Token",
                    "description": "## POST /api/auth/refresh-token\n\nRefreshes an authentication token using a refresh token provided in an HTTP-only cookie.\n\n### Responses\n\n*   `200 OK`: Token refreshed successfully. Returns `AuthResDto`.\n*   `401 Unauthorized`: Invalid or expired refresh token.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/refresh-token",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "refresh-token"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Logout",
                    "description": "## POST /api/auth/logout\n\nLogs out the current user and revokes their refresh token.\n\n### Responses\n\n*   `200 OK`: Logout successful.\n*   `400 Bad Request`: Logout failed.\n*   `401 Unauthorized`: User not authenticated.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/logout",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "logout"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Revoke Token",
                    "description": "## POST /api/auth/revoke-token/{userId}\n\nRevokes the refresh token for a specific user.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user whose token should be revoked.\n\n### Responses\n\n*   `200 OK`: Token revoked successfully.\n*   `400 Bad Request`: Invalid user ID supplied.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: User not found.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/revoke-token/{{userId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "revoke-token",
                                "{{userId}}"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Accounts",
            "description": "Account management endpoints.",
            "item": [
                {
                    "name": "Get Account By Id",
                    "description": "## GET /api/accounts/{id}\n\nRetrieves an account by its ID.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the account to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the account details. (`AccountDto`)\n*   `400 Bad Request`: Invalid account ID supplied.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Account By Account Number",
                    "description": "## GET /api/accounts/by-number/{accountNumber}\n\nRetrieves an account by its account number.\n\n### Path Parameters\n\n*   `accountNumber` (string, required): The account number to search for.\n\n### Responses\n\n*   `200 OK`: Returns the account details. (`AccountDto`)\n*   `400 Bad Request`: Invalid or missing account number.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/by-number/123456789",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "by-number",
                                "123456789"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Accounts By User Id",
                    "description": "## GET /api/accounts/by-user/{userId}\n\nRetrieves all accounts for a specific user.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user to retrieve accounts for.\n\n### Responses\n\n*   `200 OK`: Returns a list of accounts. (`IEnumerable<AccountDto>`)\n*   `400 Bad Request`: Invalid user ID supplied.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/by-user/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "by-user",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Accounts By National Id",
                    "description": "## GET /api/accounts/by-national-id/{nationalId}\n\nRetrieves accounts associated with a given national ID.\n\n### Path Parameters\n\n*   `nationalId` (string, required): The national ID to search for.\n\n### Responses\n\n*   `200 OK`: Returns a list of accounts. (`IEnumerable<AccountDto>`)\n*   `400 Bad Request`: Invalid national ID supplied.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/by-national-id/12345678901234",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "by-national-id",
                                "12345678901234"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Account",
                    "description": "## DELETE /api/accounts/{id}\n\nDeletes an account by its ID.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the account to delete.\n\n### Responses\n\n*   `204 No Content`: Account deleted successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Many Accounts",
                    "description": "## DELETE /api/accounts/bulk\n\nDeletes multiple accounts.\n\n### Request Body: `IEnumerable<int>`\n\nA JSON array of account IDs to delete.\n\n### Responses\n\n*   `204 No Content`: Accounts deleted successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "[1, 2, 3]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/bulk",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "bulk"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Set Account Active Status",
                    "description": "## PUT /api/accounts/{id}/active\n\nSets the active status of an account.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the account to update.\n\n### Query Parameters\n\n*   `isActive` (boolean, required): The new active status.\n\n### Responses\n\n*   `200 OK`: Account active status changed.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/1/active?isActive=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "1",
                                "active"
                            ],
                            "query": [
                                {
                                    "key": "isActive",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "AccountTransactions",
            "description": "Endpoints to perform transactions on accounts (deposit, withdraw, transfer) and read balance.",
            "item": [
                {
                    "name": "Deposit",
                    "description": "## POST /api/accounts/deposit\n\nDeposits money into an account.\n\n### Request Body: `DepositReqDto`\n\n*   `accountId` (integer, required): The ID of the account to deposit into.\n*   `amount` (number, required): The amount to deposit.\n\n### Responses\n\n*   `200 OK`: Deposit completed successfully. Returns `TransactionResDto`.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"accountId\": 1,\n    \"amount\": 100\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/deposit",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "deposit"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Withdraw",
                    "description": "## POST /api/accounts/withdraw\n\nWithdraws money from an account.\n\n### Request Body: `WithdrawReqDto`\n\n*   `accountId` (integer, required): The ID of the account to withdraw from.\n*   `amount` (number, required): The amount to withdraw.\n\n### Responses\n\n*   `200 OK`: Withdrawal completed successfully. Returns `TransactionResDto`.\n*   `400 Bad Request`: Invalid request or insufficient funds.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"accountId\": 1,\n    \"amount\": 50\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/withdraw",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "withdraw"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Transfer",
                    "description": "## POST /api/accounts/transfer\n\nTransfers money between accounts.\n\n### Request Body: `TransferReqDto`\n\n*   `sourceAccountId` (integer, required): The ID of the source account.\n*   `targetAccountId` (integer, required): The ID of the target account.\n*   `amount` (number, required): The amount to transfer.\n\n### Responses\n\n*   `200 OK`: Transfer completed successfully. Returns `TransactionResDto`.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Source or target account not found.\n*   `409 Conflict`: Conflict (e.g., insufficient funds).",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"fromAccountId\": 1,\n    \"toAccountId\": 2,\n    \"amount\": 25\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/transfer",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "transfer"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Balance",
                    "description": "## GET /api/accounts/{id}/balance\n\nGets the current balance of an account.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the account.\n\n### Responses\n\n*   `200 OK`: Returns the current balance.\n*   `400 Bad Request`: Invalid account ID.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/accounts/1/balance",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "accounts",
                                "1",
                                "balance"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Banks",
            "description": "Controller that manages bank resources.",
            "item": [
                {
                    "name": "Get All Banks",
                    "description": "## GET /api/banks\n\nRetrieves a paginated list of banks.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a list of banks.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/banks",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Bank By Id",
                    "description": "## GET /api/banks/{id}\n\nRetrieves a bank by its ID.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the bank to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the bank details.\n*   `404 Not Found`: Bank not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/banks/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Bank By Name",
                    "description": "## GET /api/banks/by-name/{name}\n\nRetrieves a bank by its name.\n\n### Path Parameters\n\n*   `name` (string, required): The name of the bank to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the bank details.\n*   `404 Not Found`: Bank not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/banks/by-name/MyBank",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks",
                                "by-name",
                                "MyBank"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Bank",
                    "description": "## POST /api/banks\n\nCreates a new bank.\n\n### Request Body: `BankReqDto`\n\n*   `name` (string, required): The name of the bank.\n\n### Responses\n\n*   `201 Created`: Bank created successfully.\n*   `400 Bad Request`: Invalid request.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"My New Bank\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/banks",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Bank",
                    "description": "## PUT /api/banks/{id}\n\nUpdates an existing bank.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the bank to update.\n\n### Request Body: `BankEditDto`\n\n*   `name` (string, required): The new name of the bank.\n\n### Responses\n\n*   `200 OK`: Bank updated successfully.\n*   `400 Bad Request`: Invalid request.\n*   `404 Not Found`: Bank not found.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"My Updated Bank\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/banks/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Bank",
                    "description": "## DELETE /api/banks/{id}\n\nDeletes a bank by its ID.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the bank to delete.\n\n### Responses\n\n*   `200 OK`: Bank deleted successfully.\n*   `404 Not Found`: Bank not found.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/banks/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Set Bank Active Status",
                    "description": "## PUT /api/banks/{id}/active\n\nSets the active status of a bank.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the bank to update.\n\n### Query Parameters\n\n*   `isActive` (boolean, required): The new active status.\n\n### Responses\n\n*   `200 OK`: Bank active status changed.\n*   `404 Not Found`: Bank not found.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/banks/1/active?isActive=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "banks",
                                "1",
                                "active"
                            ],
                            "query": [
                                {
                                    "key": "isActive",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "CheckingAccounts",
            "description": "Endpoints to manage checking accounts.",
            "item": [
                {
                    "name": "Get All Checking Accounts",
                    "description": "## GET /api/checking-accounts\n\nRetrieves a paginated list of checking accounts.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a page of checking accounts.\n*   `400 Bad Request`: Invalid paging parameters.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/checking-accounts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "checking-accounts"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Checking Account",
                    "description": "## POST /api/checking-accounts\n\nCreates a new checking account.\n\n### Request Body: `CheckingAccountReqDto`\n\n*   `userId` (string, required): The ID of the user who will own the account.\n*   `currencyId` (integer, required): The currency ID for the account.\n*   `initialBalance` (number, optional): The initial balance of the account.\n*   `overdraftLimit` (number, optional): The overdraft limit for the account.\n\n### Responses\n\n*   `201 Created`: Account created.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `409 Conflict`: Conflict.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"1\",\n    \"currencyId\": 1,\n    \"initialBalance\": 1000,\n    \"overdraftLimit\": 500\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/checking-accounts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "checking-accounts"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Checking Account",
                    "description": "## PUT /api/checking-accounts/{id}\n\nUpdates an existing checking account.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the checking account to update.\n\n### Request Body: `CheckingAccountEditDto`\n\n*   `userId` (string, required): The ID of the user who owns the account.\n*   `currencyId` (integer, required): The currency ID for the account.\n*   `overdraftLimit` (number, optional): The new overdraft limit.\n\n### Responses\n\n*   `200 OK`: Account updated.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"1\",\n    \"currencyId\": 1,\n    \"overdraftLimit\": 1000\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/checking-accounts/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "checking-accounts",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Set Checking Account Active Status",
                    "description": "## PUT /api/checking-accounts/{id}/active\n\nSets the active status of a checking account.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the account to update.\n\n### Query Parameters\n\n*   `isActive` (boolean, required): The new active status.\n\n### Responses\n\n*   `200 OK`: Account active status changed.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/checking-accounts/1/active?isActive=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "checking-accounts",
                                "1",
                                "active"
                            ],
                            "query": [
                                {
                                    "key": "isActive",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Currency",
            "description": "Currency management endpoints.",
            "item": [
                {
                    "name": "Get All Currencies",
                    "description": "## GET /api/currency\n\nRetrieves all currencies.\n\n### Responses\n\n*   `200 OK`: Returns a list of currencies.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: No currencies found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/currency",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "currency"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Currency By Id",
                    "description": "## GET /api/currency/{id}\n\nRetrieves a currency by its ID.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the currency to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the currency details.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: Currency not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/currency/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "currency",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Currency",
                    "description": "## POST /api/currency\n\nCreates a new currency.\n\n### Request Body: `CurrencyReqDto`\n\n*   `code` (string, required): The currency code (e.g., USD).\n*   `isBase` (boolean, optional): Whether this is the base currency.\n*   `exchangeRate` (number, optional): The exchange rate relative to the base currency.\n\n### Responses\n\n*   `201 Created`: Currency created successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"code\": \"EGP\",\n    \"isBase\": true,\n    \"exchangeRate\": 1\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/currency",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "currency"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Currency",
                    "description": "## PUT /api/currency/{id}\n\nUpdates an existing currency.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the currency to update.\n\n### Request Body: `CurrencyReqDto`\n\n*   `code` (string, required): The currency code (e.g., USD).\n*   `isBase` (boolean, optional): Whether this is the base currency.\n*   `exchangeRate` (number, optional): The exchange rate relative to the base currency.\n\n### Responses\n\n*   `200 OK`: Currency updated successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"code\": \"EGP\",\n    \"isBase\": true,\n    \"exchangeRate\": 1\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/currency/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "currency",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Currency",
                    "description": "## DELETE /api/currency/{id}\n\nDeletes a currency by its ID.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the currency to delete.\n\n### Responses\n\n*   `204 No Content`: Currency deleted successfully.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/currency/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "currency",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Set Currency Active Status",
                    "description": "## PUT /api/currency/{id}/active\n\nSets the active status of a currency.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the currency to update.\n\n### Query Parameters\n\n*   `isActive` (boolean, required): The new active status.\n\n### Responses\n\n*   `200 OK`: Currency active status changed.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/currency/1/active?isActive=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "currency",
                                "1",
                                "active"
                            ],
                            "query": [
                                {
                                    "key": "isActive",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "RoleClaims",
            "description": "Role claims management endpoints.",
            "item": [
                {
                    "name": "Assign Claims to Role",
                    "description": "## POST /api/roleclaims/Assign\n\nUpdates the claims for a role.\n\n### Request Body: `UpdateRoleClaimsDto`\n\n*   `roleName` (string, required): The name of the role to update.\n*   `claims` (array of strings, required): The list of claims to assign to the role.\n\n### Responses\n\n*   `200 OK`: Role claims updated successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"roleName\": \"Admin\",\n    \"claims\": [\"Permission.User.Create\", \"Permission.User.Read\"]\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/roleclaims/Assign",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "roleclaims",
                                "Assign"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get All Claims",
                    "description": "## GET /api/roleclaims/GetAllClaims\n\nRetrieves all available claims, grouped by category.\n\n### Responses\n\n*   `200 OK`: Returns a list of all claims.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/roleclaims/GetAllClaims",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "roleclaims",
                                "GetAllClaims"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Roles",
            "description": "Role management endpoints.",
            "item": [
                {
                    "name": "Get All Roles",
                    "description": "## GET /api/roles/GetAllRoles\n\nRetrieves all roles.\n\n### Responses\n\n*   `200 OK`: Returns a list of roles.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: No roles found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/roles/GetAllRoles",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "roles",
                                "GetAllRoles"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Role",
                    "description": "## POST /api/roles/CreateRole\n\nCreates a new role.\n\n### Request Body: `RoleReqDto`\n\n*   `name` (string, required): The name of the role.\n*   `parentRoleNames` (array of strings, optional): A list of parent role names.\n\n### Responses\n\n*   `200 OK`: Role created successfully.\n*   `400 Bad Request`: Invalid role data.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"New Role\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/roles/CreateRole",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "roles",
                                "CreateRole"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Role",
                    "description": "## DELETE /api/roles/DeleteRole/{roleId}\n\nDeletes a role by its ID.\n\n### Path Parameters\n\n*   `roleId` (string, required): The ID of the role to delete.\n\n### Responses\n\n*   `200 OK`: Role deleted successfully.\n*   `400 Bad Request`: Invalid role ID.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Role not found.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/roles/DeleteRole/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "roles",
                                "DeleteRole",
                                "1"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "SavingsAccounts",
            "description": "Endpoints to manage savings accounts.",
            "item": [
                {
                    "name": "Get All Savings Accounts",
                    "description": "## GET /api/savings-accounts\n\nRetrieves a paginated list of savings accounts.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a page of savings accounts.\n*   `400 Bad Request`: Invalid paging parameters.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/savings-accounts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "savings-accounts"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Savings Account",
                    "description": "## POST /api/savings-accounts\n\nCreates a new savings account.\n\n### Request Body: `SavingsAccountReqDto`\n\n*   `userId` (string, required): The ID of the user who will own the account.\n*   `currencyId` (integer, required): The currency ID for the account.\n*   `initialBalance` (number, optional): The initial balance of the account.\n*   `interestRate` (number, optional): The interest rate for the account.\n*   `interestType` (InterestType, optional): The type of interest calculation.\n\n### Responses\n\n*   `201 Created`: Account created.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `409 Conflict`: Conflict.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"1\",\n    \"currencyId\": 1,\n    \"initialBalance\": 1000,\n    \"interestRate\": 5,\n    \"interestType\": 0\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/savings-accounts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "savings-accounts"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Savings Account",
                    "description": "## PUT /api/savings-accounts/{id}\n\nUpdates an existing savings account.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the savings account to update.\n\n### Request Body: `SavingsAccountEditDto`\n\n*   `userId` (string, required): The ID of the user who owns the account.\n*   `currencyId` (integer, required): The currency ID for the account.\n*   `interestRate` (number, optional): The new interest rate.\n*   `interestType` (InterestType, optional): The new type of interest calculation.\n\n### Responses\n\n*   `200 OK`: Account updated.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"1\",\n    \"currencyId\": 1,\n    \"interestRate\": 6,\n    \"interestType\": 0\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/savings-accounts/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "savings-accounts",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Set Savings Account Active Status",
                    "description": "## PUT /api/savings-accounts/{id}/active\n\nSets the active status of a savings account.\n\n### Path Parameters\n\n*   `id` (integer, required): The ID of the account to update.\n\n### Query Parameters\n\n*   `isActive` (boolean, required): The new active status.\n\n### Responses\n\n*   `200 OK`: Account active status changed.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/savings-accounts/1/active?isActive=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "savings-accounts",
                                "1",
                                "active"
                            ],
                            "query": [
                                {
                                    "key": "isActive",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get All Interest Logs",
                    "description": "## GET /api/savings-accounts/interest-logs\n\nRetrieves all interest logs with pagination.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a list of interest logs.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/savings-accounts/interest-logs",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "savings-accounts",
                                "interest-logs"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Interest Logs By Account Id",
                    "description": "## GET /api/savings-accounts/{accountId}/interest-logs\n\nRetrieves all interest logs for a specific account with pagination.\n\n### Path Parameters\n\n*   `accountId` (integer, required): The ID of the account.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a list of interest logs for the account.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/savings-accounts/1/interest-logs",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "savings-accounts",
                                "1",
                                "interest-logs"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Transactions",
            "description": "Operations to read transaction history and list transactions.",
            "item": [
                {
                    "name": "Get Transaction History",
                    "description": "## GET /api/transactions/{accountId}/history\n\nRetrieves the transaction history for an account.\n\n### Path Parameters\n\n*   `accountId` (integer, required): The ID of the account.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 20): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns the transaction history.\n*   `400 Bad Request`: Invalid account ID.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: Account not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/transactions/1/history",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "transactions",
                                "1",
                                "history"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Transaction By Id",
                    "description": "## GET /api/transactions/{transactionId}\n\nRetrieves a transaction by its ID.\n\n### Path Parameters\n\n*   `transactionId` (integer, required): The ID of the transaction to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the transaction details.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: Transaction not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/transactions/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "transactions",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get All Transactions",
                    "description": "## GET /api/transactions\n\nRetrieves a paginated list of all transactions.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a list of all transactions.\n*   `400 Bad Request`: Invalid paging parameters.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/transactions",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "transactions"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Users",
            "description": "User management endpoints.",
            "item": [
                {
                    "name": "Get All Users",
                    "description": "## GET /api/users\n\nRetrieves a paginated list of users.\n\n### Query Parameters\n\n*   `pageNumber` (integer, optional, default: 1): The page number to retrieve.\n*   `pageSize` (integer, optional, default: 10): The number of items per page.\n\n### Responses\n\n*   `200 OK`: Returns a list of users.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: No users found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Users By Bank Id",
                    "description": "## GET /api/users/by-bank/{bankId}\n\nRetrieves users associated with a specific bank.\n\n### Path Parameters\n\n*   `bankId` (integer, required): The ID of the bank.\n\n### Responses\n\n*   `200 OK`: Returns a list of users.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: No users found for the specified bank.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/by-bank/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "by-bank",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Users By Bank Name",
                    "description": "## GET /api/users/by-bank-name/{bankName}\n\nRetrieves users associated with a specific bank by name.\n\n### Path Parameters\n\n*   `bankName` (string, required): The name of the bank.\n\n### Responses\n\n*   `200 OK`: Returns a list of users.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: No users found for the specified bank name.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/by-bank-name/MyBank",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "by-bank-name",
                                "MyBank"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get User By Username",
                    "description": "## GET /api/users/by-username/{username}\n\nRetrieves a user by their username.\n\n### Path Parameters\n\n*   `username` (string, required): The username of the user to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the user details.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: User not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/by-username/testuser",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "by-username",
                                "testuser"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get User By Id",
                    "description": "## GET /api/users/{userId}\n\nRetrieves a user by their ID.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user to retrieve.\n\n### Responses\n\n*   `200 OK`: Returns the user details.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: User not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create User",
                    "description": "## POST /api/users\n\nCreates a new user.\n\n### Request Body: `UserReqDto`\n\n*   `email` (string, required): The user\'s email address.\n*   `username` (string, required): The user\'s username.\n*   `fullName` (string, required): The user\'s full name.\n*   `nationalId` (string, required): The user\'s national ID.\n*   `phoneNumber` (string, required): The user\'s phone number.\n*   `dateOfBirth` (string, required): The user\'s date of birth.\n*   `role` (string, optional): The user\'s role.\n*   `bankId` (integer, optional): The ID of the bank to associate the user with.\n*   `password` (string, required): The user\'s password.\n*   `passwordConfirm` (string, required): The password confirmation.\n\n### Responses\n\n*   `201 Created`: User created successfully.\n*   `400 Bad Request`: Invalid user data.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"testuser@example.com\",\n    \"username\": \"testuser\",\n    \"fullName\": \"Test User\",\n    \"nationalId\": \"12345678901234\",\n    \"phoneNumber\": \"12345678901\",\n    \"dateOfBirth\": \"2000-01-01\",\n    \"password\": \"Password123!\",\n    \"passwordConfirm\": \"Password123!\",\n    \"role\": \"Client\",\n    \"bankId\": 1\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update User",
                    "description": "## PUT /api/users/{userId}\n\nUpdates an existing user.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user to update.\n\n### Request Body: `UserEditDto`\n\n*   `email` (string, required): The user\'s email address.\n*   `username` (string, required): The user\'s username.\n*   `fullName` (string, required): The user\'s full name.\n*   `nationalId` (string, required): The user\'s national ID.\n*   `phoneNumber` (string, required): The user\'s phone number.\n*   `dateOfBirth` (string, required): The user\'s date of birth.\n\n### Responses\n\n*   `200 OK`: User updated successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"testuser@example.com\",\n    \"username\": \"testuser\",\n    \"fullName\": \"Test User Updated\",\n    \"nationalId\": \"12345678901234\",\n    \"phoneNumber\": \"12345678901\",\n    \"dateOfBirth\": \"2000-01-01\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/users/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Change User Password",
                    "description": "## PUT /api/users/{userId}/password\n\nChanges a user\'s password.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user.\n\n### Request Body: `ChangePasswordReqDto`\n\n*   `currentPassword` (string, optional): The user\'s current password.\n*   `newPassword` (string, required): The new password.\n*   `confirmNewPassword` (string, required): The new password confirmation.\n\n### Responses\n\n*   `200 OK`: Password changed successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"currentPassword\": \"Password123!\",\n    \"newPassword\": \"NewPassword123!\",\n    \"confirmNewPassword\": \"NewPassword123!\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/users/1/password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "1",
                                "password"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete User",
                    "description": "## DELETE /api/users/{userId}\n\nDeletes a user by their ID.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user to delete.\n\n### Responses\n\n*   `200 OK`: User deleted successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/1",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "1"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Range Of Users",
                    "description": "## DELETE /api/users/bulk\n\nDeletes a range of users.\n\n### Request Body: `IEnumerable<string>`\n\nA JSON array of user IDs to delete.\n\n### Responses\n\n*   `200 OK`: Users deleted successfully.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "[\"1\", \"2\"]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/users/bulk",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "bulk"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get My Info",
                    "description": "## GET /api/users/me\n\nRetrieves the information of the currently authenticated user.\n\n### Responses\n\n*   `200 OK`: Returns the current user\'s info.\n*   `401 Unauthorized`: Unauthorized.\n*   `404 Not Found`: User not found.",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "me"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Set User Active Status",
                    "description": "## PUT /api/users/{userId}/active\n\nSets the active status of a user.\n\n### Path Parameters\n\n*   `userId` (string, required): The ID of the user to update.\n\n### Query Parameters\n\n*   `isActive` (boolean, required): The new active status.\n\n### Responses\n\n*   `200 OK`: User active status changed.\n*   `400 Bad Request`: Invalid request.\n*   `401 Unauthorized`: Unauthorized.",
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users/1/active?isActive=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users",
                                "1",
                                "active"
                            ],
                            "query": [
                                {
                                    "key": "isActive",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "UserRoles",
            "description": "Endpoints to manage user roles assignment.",
            "item": [
                {
                    "name": "Assign Roles to User",
                    "description": "## POST /api/userroles/Assign\n\nAssigns roles to a user.\n\n### Request Body: `UpdateUserRolesDto`\n\n*   `userId` (string, required): The ID of the user.\n*   `role` (string, required): The role to assign.\n\n### Responses\n\n*   `200 OK`: Roles assigned successfully.\n*   `400 Bad Request`: Invalid request data.\n*   `401 Unauthorized`: Unauthorized.\n*   `403 Forbidden`: Forbidden.",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"1\",\n    \"role\": \"Admin\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/userroles/Assign",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "userroles",
                                "Assign"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        }
    ]
}