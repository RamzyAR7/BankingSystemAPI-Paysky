<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BankingSystemAPI.Domain</name>
    </assembly>
    <members>
        <member name="T:BankingSystemAPI.Domain.Common.Result">
            <summary>
            Enhanced operation result without a value following best practices.
            Now includes semantic factory methods for proper HTTP status code mapping.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.NotFound(System.String,System.Object)">
            <summary>
            Creates a Not Found result (404) - Resource doesn't exist
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.Unauthorized(System.String)">
            <summary>
            Creates an Unauthorized result (401) - Authentication required
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.Forbidden(System.String)">
            <summary>
            Creates a Forbidden result (403) - Insufficient permissions
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.BadRequest(System.String)">
            <summary>
            Creates a Bad Request result (400) - Invalid input/request format
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.Conflict(System.String)">
            <summary>
            Creates a Conflict result (409) - Business rule violation or resource conflict
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.ValidationFailed(System.String)">
            <summary>
            Creates an Unprocessable Entity result (422) - Valid format but business validation failed
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.InsufficientFunds(System.Decimal,System.Decimal)">
            <summary>
            Creates a result for insufficient funds scenario
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.AccountInactive(System.String)">
            <summary>
            Creates a result for inactive account scenario
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.AlreadyExists(System.String,System.String)">
            <summary>
            Creates a result for duplicate resource scenario
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.InvalidCredentials(System.String)">
            <summary>
            Creates a result for invalid credentials scenario
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.Result.TokenExpired(System.String)">
            <summary>
            Creates a result for expired token scenario
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Common.Result`1">
            <summary>
            Enhanced operation result with a value following best practices.
            Includes semantic factory methods for proper HTTP status code mapping.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Extensions.ResultExtensions">
            <summary>
            Extension methods for Result pattern to improve usability
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnSuccess(BankingSystemAPI.Domain.Common.Result,System.Action)">
            <summary>
            Execute action if result is successful
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnSuccessAsync(BankingSystemAPI.Domain.Common.Result,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Execute action if result is successful (async)
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnFailure(BankingSystemAPI.Domain.Common.Result,System.Action{System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
            Execute action if result fails
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnSuccess``1(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}},System.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnFailure``1(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}},System.Action{System.Collections.Generic.IReadOnlyList{System.String}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnSuccess(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result},System.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.OnFailure(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result},System.Action{System.Collections.Generic.IReadOnlyList{System.String}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.Map``2(BankingSystemAPI.Domain.Common.Result{``0},System.Func{``0,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.MapAsync``2(BankingSystemAPI.Domain.Common.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.MapAsync``2(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})" -->
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.Bind``2(BankingSystemAPI.Domain.Common.Result{``0},System.Func{``0,BankingSystemAPI.Domain.Common.Result{``1}})">
            <summary>
            Bind operation - chain Results together
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.Bind``1(BankingSystemAPI.Domain.Common.Result{``0},System.Func{``0,BankingSystemAPI.Domain.Common.Result})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.Bind``1(BankingSystemAPI.Domain.Common.Result,System.Func{BankingSystemAPI.Domain.Common.Result{``0}})" -->
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.Bind(BankingSystemAPI.Domain.Common.Result,System.Func{BankingSystemAPI.Domain.Common.Result})">
            <summary>
            Bind operation - chain Result to Result
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync``2(BankingSystemAPI.Domain.Common.Result{``0},System.Func{``0,System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``1}}})">
            <summary>
            Bind operation - chain Results together (async)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync``1(BankingSystemAPI.Domain.Common.Result{``0},System.Func{``0,System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync``1(BankingSystemAPI.Domain.Common.Result,System.Func{System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync(BankingSystemAPI.Domain.Common.Result,System.Func{System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync``2(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``1}}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync``1(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}},System.Func{``0,System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync``1(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result},System.Func{System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.BindAsync(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result},System.Func{System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result}})" -->
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Extensions.ResultExtensions.GetAwaiter``1(System.Threading.Tasks.Task{BankingSystemAPI.Domain.Common.Result{``0}})" -->
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.ValidateAll(BankingSystemAPI.Domain.Common.Result[])">
            <summary>
            Validate multiple results and return combined result
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.ToResult``1(``0,System.String)">
            <summary>
            Convert nullable value to Result
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Extensions.ResultExtensions.ToResult``1(System.Nullable{``0},System.String)">
            <summary>
            Convert nullable value to Result (value types)
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.InterestType">
            <summary>
            Interest payment frequency for savings accounts.
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.Monthly">
            <summary>
            Interest applied every month (value = 1).
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.Quarterly">
            <summary>
            Interest applied every quarter (value = 2).
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.Annually">
            <summary>
            Interest applied annually (value = 3).
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.every5minutes">
            <summary>
            For testing purposes: interest applied every 5 minutes (value = 4).
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Entities.Account">
            <summary>
            Abstract base class for all account types in the banking system.
            Implements optimistic concurrency control via RowVersion.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.Id">
            <summary>
            Primary key identifier for the account.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.AccountNumber">
            <summary>
            Unique account number for identification.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.Balance">
            <summary>
            Current account balance with precision for financial calculations.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.CreatedDate">
            <summary>
            UTC timestamp when the account was created.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.UserId">
            <summary>
            Foreign key reference to the account owner.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.CurrencyId">
            <summary>
            Foreign key reference to the account currency.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.IsActive">
            <summary>
            Indicates whether the account is active and can perform transactions.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.User">
            <summary>
            Navigation property to the account owner.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.Currency">
            <summary>
            Navigation property to the account currency.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.AccountTransactions">
            <summary>
            Navigation property to all transactions involving this account.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.RowVersion">
            <summary>
            Row version for optimistic concurrency control.
            Automatically managed by Entity Framework.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.AccountType">
            <summary>
            Gets the account type for polymorphic identification.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.Deposit(System.Decimal)">
            <summary>
            Performs a deposit operation on the account.
            </summary>
            <param name="amount">Amount to deposit (must be positive)</param>
            <exception cref="T:System.InvalidOperationException">Thrown when amount is not positive</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.Withdraw(System.Decimal)">
            <summary>
            Abstract method for withdrawal operations.
            Concrete account types must implement specific withdrawal rules.
            </summary>
            <param name="amount">Amount to withdraw</param>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.WithdrawForTransfer(System.Decimal)">
            <summary>
            Performs withdrawal for transfer operations.
            Default implementation prevents overdraft (no negative balance allowed).
            </summary>
            <param name="amount">Amount to withdraw for transfer</param>
            <exception cref="T:System.InvalidOperationException">Thrown when amount is invalid or insufficient funds</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.CanPerformTransactions">
            <summary>
            Validates if the account can perform transactions.
            </summary>
            <returns>True if account is active and ready for transactions</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.GetAvailableBalance">
            <summary>
            Gets available balance for withdrawal operations.
            Base implementation returns current balance.
            Override in derived classes for accounts with overdraft facilities.
            </summary>
            <returns>Available balance including any overdraft facility</returns>
        </member>
        <member name="T:BankingSystemAPI.Domain.Entities.CheckingAccount">
            <summary>
            Checking account with overdraft facility.
            Allows negative balance up to the overdraft limit.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.CheckingAccount.OverdraftLimit">
            <summary>
            Maximum overdraft amount allowed for this checking account.
            Must be non-negative.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.CheckingAccount.AccountType">
            <summary>
            Gets the account type identifier.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetMaxWithdrawalAmount">
            <summary>
            Gets the maximum amount that can be withdrawn including overdraft facility.
            This is what should be used for withdrawal validation.
            </summary>
            <returns>Balance plus available overdraft credit</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.CanWithdraw(System.Decimal)">
            <summary>
            Checks if a withdrawal amount is allowed with overdraft facility.
            </summary>
            <param name="amount">Amount to withdraw</param>
            <returns>True if withdrawal is within limits</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.Withdraw(System.Decimal)">
            <summary>
            Performs withdrawal with overdraft facility.
            Validates against maximum withdrawal amount including overdraft.
            </summary>
            <param name="amount">Amount to withdraw</param>
            <exception cref="T:System.InvalidOperationException">Thrown when withdrawal exceeds limits</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.IsOverdrawn">
            <summary>
            Checks if account is using overdraft facility.
            </summary>
            <returns>True if balance is negative</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetOverdraftUsed">
            <summary>
            Gets the current overdraft amount being used.
            </summary>
            <returns>Overdraft amount in use (0 if not overdrawn)</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetAvailableOverdraftCredit">
            <summary>
            Gets remaining overdraft credit available for withdrawal.
            </summary>
            <returns>Remaining overdraft credit that can be used</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetAccountStatus">
            <summary>
            Gets detailed account status including overdraft information.
            </summary>
            <returns>Formatted string with balance and overdraft details</returns>
        </member>
        <member name="T:BankingSystemAPI.Domain.Entities.SavingsAccount">
            <summary>
            Savings account with interest calculation.
            Does not allow overdraft - balance must remain non-negative.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.InterestRate">
            <summary>
            Annual interest rate as a decimal (e.g., 0.05 for 5%).
            Must be between 0% and 100%.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.InterestType">
            <summary>
            Type of interest calculation frequency (Monthly, Quarterly, Annually).
            Configuration handled in SavingsAccountConfiguration.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.InterestLogs">
            <summary>
            Navigation property to interest calculation history.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.AccountType">
            <summary>
            Gets the account type identifier.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.Withdraw(System.Decimal)">
            <summary>
            Performs withdrawal from savings account.
            Does not allow overdraft - balance must remain non-negative.
            </summary>
            <param name="amount">Amount to withdraw</param>
            <exception cref="T:System.InvalidOperationException">Thrown when insufficient funds or invalid amount</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.CalculateInterest(System.Int32)">
            <summary>
            Calculates interest based on current balance, interest rate and frequency.
            </summary>
            <param name="days">Number of days to calculate interest for</param>
            <returns>Interest amount calculated</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.GetPeriodsPerYear">
            <summary>
            Gets the number of interest periods per year based on InterestType.
            </summary>
            <returns>Number of periods per year</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.ApplyInterest(System.Decimal,System.DateTime)">
            <summary>
            Applies calculated interest to the account balance.
            </summary>
            <param name="interestAmount">Amount of interest to apply</param>
            <param name="calculationDate">Date when interest was calculated</param>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.GetLastInterestDate">
            <summary>
            Gets the last interest calculation date.
            </summary>
            <returns>Date of last interest calculation, or account creation date if no interest applied</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.ShouldApplyInterest">
            <summary>
            Checks if interest should be applied based on the interest type and last calculation.
            </summary>
            <returns>True if interest should be calculated and applied</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.GetTotalInterestEarned">
            <summary>
            Gets total interest earned on this account.
            </summary>
            <returns>Sum of all interest amounts applied</returns>
        </member>
    </members>
</doc>
