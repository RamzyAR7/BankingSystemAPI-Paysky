<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BankingSystemAPI.Domain</name>
    </assembly>
    <members>
        <member name="T:BankingSystemAPI.Domain.Common.ResultErrorDetails">
            <summary>
            Structured metadata for an error (optional)
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.ResultErrorDetails.#ctor(System.String,System.String,System.Object)">
            <summary>
            Structured metadata for an error (optional)
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Common.ResultError">
            <summary>
            Single error item used by Result. Immutable and strongly typed.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Common.ResultError.#ctor(BankingSystemAPI.Domain.Constant.ErrorType,System.String,BankingSystemAPI.Domain.Common.ResultErrorDetails)">
            <summary>
            Single error item used by Result. Immutable and strongly typed.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Common.Result">
            <summary>
            Enhanced operation result without a value. Immutable (record class).
            Preserves backward-compatible string Errors list while exposing structured errors.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Common.Result`1">
            <summary>
            Generic Result with value. Immutable (record class) and backward-compatible.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Common.ResultErrorMapper">
            <summary>
            Centralized mapping between ErrorType and HTTP status codes.
            Keeps HTTP mapping consolidated and easy to change/test.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Common.ResultFactory">
            <summary>
            Helper to construct Result and Result{T} instances via reflection in a centralized place.
            This isolates reflection usage and simplifies testing.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BankingSystemAPI.Domain.Common.ResultFactory.CreateGenericFailure(System.Type,System.Collections.Generic.IEnumerable{BankingSystemAPI.Domain.Common.ResultError})" -->
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages">
            <summary>
            Constants for API response messages to maintain consistency and improve maintainability
            Enhanced to work seamlessly with semantic Result factory methods
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Generic">
            <summary>
            Generic response messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.ErrorPatterns">
            <summary>
            Error message patterns for semantic Result factory methods
            These patterns are used by BaseApiController to map errors to proper HTTP status codes
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Validation">
            <summary>
            Validation and request related messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Infrastructure">
            <summary>
            Messages used by middleware and infrastructure layers
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Delete">
            <summary>
            Delete operation messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Update">
            <summary>
            Update operation messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Create">
            <summary>
            Creation operation messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Status">
            <summary>
            Active/Inactive status messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Authentication">
            <summary>
            Authentication and processing messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Transaction">
            <summary>
            Transaction processing messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.RolePermissions">
            <summary>
            Role and permission messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Processing">
            <summary>
            General processing messages
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.BankingErrors">
            <summary>
            Banking-specific error messages that align with Result factory methods
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.ApiResponseMessages.BankingErrors.InsufficientFundsFormat">
            <summary>
            Format: "Insufficient funds. Requested: {0}, Available: {1}"
            Used by Result.InsufficientFunds()
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.ApiResponseMessages.BankingErrors.AccountInactiveFormat">
            <summary>
            Format: "Account {0} is inactive and cannot be used for transactions"
            Used by Result.AccountInactive()
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.ApiResponseMessages.BankingErrors.AlreadyExistsFormat">
            <summary>
            Format: "{0} with identifier '{1}' already exists"
            Used by Result.AlreadyExists()
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.ApiResponseMessages.BankingErrors.NotFoundFormat">
            <summary>
            Format: "{0} with id '{1}' was not found"
            Used by Result.NotFound()
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.ApiResponseMessages.BankingErrors.TransfersFromClientsOnly">
            <summary>
            Specific message for transfer authorization when source is not client-owned
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ApiResponseMessages.Logging">
            <summary>
            Centralized structured logging templates
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.AuthorizationConstants">
            <summary>
            Centralized authorization constants organized by functional areas
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.AccessScope">
            <summary>
            Defines access scopes for authorization in hierarchical order from most restrictive to least restrictive
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AccessScope.Self">
            <summary>
            Most restrictive: Users can only access their own data
            Applied to: Clients
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AccessScope.BankLevel">
            <summary>
            Bank-level access: Users can access data within their bank with role restrictions
            Applied to: Bank Admins, Regional Managers
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AccessScope.Global">
            <summary>
            Least restrictive: Full system access
            Applied to: Super Admins, System Administrators
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.AuthorizationCheckType">
            <summary>
            Defines authorization check types in logical operation order
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AuthorizationCheckType.View">
            <summary>
            Check if user can view/read resources
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AuthorizationCheckType.Create">
            <summary>
            Check if user can create new resources
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AuthorizationCheckType.Modify">
            <summary>
            Check if user can modify existing resources
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AuthorizationCheckType.Delete">
            <summary>
            Check if user can delete/remove resources
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.AuthorizationCheckType.Administrate">
            <summary>
            Check if user can perform administrative operations
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.ErrorType">
            <summary>
            Strongly-typed error category for Result pattern
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Constant.InterestType">
            <summary>
            Interest payment frequency for savings accounts.
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.Monthly">
            <summary>
            Interest applied every month (value = 1).
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.Quarterly">
            <summary>
            Interest applied every quarter (value = 2).
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.Annually">
            <summary>
            Interest applied annually (value = 3).
            </summary>
        </member>
        <member name="F:BankingSystemAPI.Domain.Constant.InterestType.every5minutes">
            <summary>
            For testing purposes: interest applied every 5 minutes (value = 4).
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Domain.Entities.Account">
            <summary>
            Abstract base class for all account types in the banking system.
            Implements optimistic concurrency control via RowVersion.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.Id">
            <summary>
            Primary key identifier for the account.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.AccountNumber">
            <summary>
            Unique account number for identification.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.Balance">
            <summary>
            Current account balance with precision for financial calculations.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.CreatedDate">
            <summary>
            UTC timestamp when the account was created.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.UserId">
            <summary>
            Foreign key reference to the account owner.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.CurrencyId">
            <summary>
            Foreign key reference to the account currency.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.IsActive">
            <summary>
            Indicates whether the account is active and can perform transactions.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.User">
            <summary>
            Navigation property to the account owner.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.Currency">
            <summary>
            Navigation property to the account currency.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.AccountTransactions">
            <summary>
            Navigation property to all transactions involving this account.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.RowVersion">
            <summary>
            Row version for optimistic concurrency control.
            Automatically managed by Entity Framework.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.Account.AccountType">
            <summary>
            Gets the account type for polymorphic identification.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.Deposit(System.Decimal)">
            <summary>
            Performs a deposit operation on the account.
            </summary>
            <param name="amount">Amount to deposit (must be positive)</param>
            <exception cref="T:System.InvalidOperationException">Thrown when amount is not positive</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.Withdraw(System.Decimal)">
            <summary>
            Abstract method for withdrawal operations.
            Concrete account types must implement specific withdrawal rules.
            </summary>
            <param name="amount">Amount to withdraw</param>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.WithdrawForTransfer(System.Decimal)">
            <summary>
            Performs withdrawal for transfer operations including fees.
            Default implementation prevents overdraft (no negative balance allowed).
            </summary>
            <param name="totalAmount">Total amount to withdraw including transfer amount and fees</param>
            <exception cref="T:System.InvalidOperationException">Thrown when amount is invalid or insufficient funds</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.CanPerformTransactions">
            <summary>
            Validates if the account can perform transactions.
            </summary>
            <returns>True if account is active and ready for transactions</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.Account.GetAvailableBalance">
            <summary>
            Gets available balance for withdrawal operations.
            Base implementation returns current balance.
            Override in derived classes for accounts with overdraft facilities.
            </summary>
            <returns>Available balance including any overdraft facility</returns>
        </member>
        <member name="T:BankingSystemAPI.Domain.Entities.CheckingAccount">
            <summary>
            Checking account with overdraft facility.
            Allows negative balance up to the overdraft limit.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.CheckingAccount.OverdraftLimit">
            <summary>
            Maximum overdraft amount allowed for this checking account.
            Must be non-negative.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.CheckingAccount.AccountType">
            <summary>
            Gets the account type identifier.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetMaxWithdrawalAmount">
            <summary>
            Gets the maximum amount that can be withdrawn including overdraft facility.
            This is what should be used for withdrawal validation.
            </summary>
            <returns>Balance plus available overdraft credit</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.CanWithdraw(System.Decimal)">
            <summary>
            Checks if a withdrawal amount is allowed with overdraft facility.
            </summary>
            <param name="amount">Amount to withdraw</param>
            <returns>True if withdrawal is within limits</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.Withdraw(System.Decimal)">
            <summary>
            Performs withdrawal with overdraft facility.
            Validates against maximum withdrawal amount including overdraft.
            </summary>
            <param name="amount">Amount to withdraw</param>
            <exception cref="T:System.InvalidOperationException">Thrown when withdrawal exceeds limits</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.IsOverdrawn">
            <summary>
            Checks if account is using overdraft facility.
            </summary>
            <returns>True if balance is negative</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetOverdraftUsed">
            <summary>
            Gets the current overdraft amount being used.
            </summary>
            <returns>Overdraft amount in use (0 if not overdrawn)</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetAvailableOverdraftCredit">
            <summary>
            Gets remaining overdraft credit available for withdrawal.
            </summary>
            <returns>Remaining overdraft credit that can be used</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.CheckingAccount.GetAccountStatus">
            <summary>
            Gets detailed account status including overdraft information.
            </summary>
            <returns>Formatted string with balance and overdraft details</returns>
        </member>
        <member name="T:BankingSystemAPI.Domain.Entities.SavingsAccount">
            <summary>
            Savings account with interest calculation.
            Does not allow overdraft - balance must remain non-negative.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.InterestRate">
            <summary>
            Annual interest rate as a decimal (e.g., 0.05 for 5%).
            Must be between 0% and 100%.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.InterestType">
            <summary>
            Type of interest calculation frequency (Monthly, Quarterly, Annually).
            Configuration handled in SavingsAccountConfiguration.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.InterestLogs">
            <summary>
            Navigation property to interest calculation history.
            </summary>
        </member>
        <member name="P:BankingSystemAPI.Domain.Entities.SavingsAccount.AccountType">
            <summary>
            Gets the account type identifier.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.Withdraw(System.Decimal)">
            <summary>
            Performs withdrawal from savings account.
            Does not allow overdraft - balance must remain non-negative.
            </summary>
            <param name="amount">Amount to withdraw</param>
            <exception cref="T:System.InvalidOperationException">Thrown when insufficient funds or invalid amount</exception>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.CalculateInterest(System.Int32)">
            <summary>
            Calculates interest based on current balance, interest rate and frequency.
            </summary>
            <param name="days">Number of days to calculate interest for</param>
            <returns>Interest amount calculated</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.GetPeriodsPerYear">
            <summary>
            Gets the number of interest periods per year based on InterestType.
            </summary>
            <returns>Number of periods per year</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.ApplyInterest(System.Decimal,System.DateTime)">
            <summary>
            Applies calculated interest to the account balance.
            </summary>
            <param name="interestAmount">Amount of interest to apply</param>
            <param name="calculationDate">Date when interest was calculated</param>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.GetLastInterestDate">
            <summary>
            Gets the last interest calculation date.
            </summary>
            <returns>Date of last interest calculation, or account creation date if no interest applied</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.ShouldApplyInterest">
            <summary>
            Checks if interest should be applied based on the interest type and last calculation.
            </summary>
            <returns>True if interest should be calculated and applied</returns>
        </member>
        <member name="M:BankingSystemAPI.Domain.Entities.SavingsAccount.GetTotalInterestEarned">
            <summary>
            Gets total interest earned on this account.
            </summary>
            <returns>Sum of all interest amounts applied</returns>
        </member>
    </members>
</doc>
