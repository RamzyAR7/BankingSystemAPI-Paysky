<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BankingSystemAPI.Presentation</name>
    </assembly>
    <members>
        <member name="T:BankingSystemAPI.Presentation.Controllers.AccountController">
            <summary>
            Account management endpoints.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.GetById(System.Int32)">
            <summary>
            Get account by id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.GetByAccountNumber(System.String)">
            <summary>
            Get account by account number.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.GetByUserId(System.String)">
            <summary>
            Get all accounts for a user.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.GetByNationalId(System.String)">
            <summary>
            Get accounts by national ID.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.Delete(System.Int32)">
            <summary>
            Delete account by id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.DeleteMany(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Delete multiple accounts.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountController.SetActive(System.Int32,System.Boolean)">
            <summary>
            Set account active/inactive status.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.AccountTransactionsController">
            <summary>
            Endpoints to perform transactions on accounts (deposit, withdraw, transfer) and read balance.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountTransactionsController.Deposit(BankingSystemAPI.Application.DTOs.Transactions.DepositReqDto)">
            <summary>
            Deposit money into an account.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountTransactionsController.Withdraw(BankingSystemAPI.Application.DTOs.Transactions.WithdrawReqDto)">
            <summary>
            Withdraw money from an account.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountTransactionsController.Transfer(BankingSystemAPI.Application.DTOs.Transactions.TransferReqDto)">
            <summary>
            Transfer money between accounts.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AccountTransactionsController.GetBalance(System.Int32)">
            <summary>
            Get current balance of an account.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.AuthController">
            <summary>
            Authentication endpoints (login, refresh, logout, revoke tokens).
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AuthController.Login(BankingSystemAPI.Application.DTOs.Auth.LoginReqDto)">
            <summary>
            Login with credentials and receive authentication data.
            </summary>
            <param name="request">Login request containing username and password.</param>
            <response code="200">Returns authentication data (tokens).</response>
            <response code="400">Invalid request model or credentials.</response>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AuthController.RefreshToken">
            <summary>
            Refresh authentication token using refresh token present in cookies.
            </summary>
            <response code="200">Returns refreshed authentication data.</response>
            <response code="400">Invalid or expired refresh token.</response>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AuthController.Logout">
            <summary>
            Logout current user and revoke refresh token.
            </summary>
            <response code="200">Logout succeeded.</response>
            <response code="400">Logout failed or user not authenticated.</response>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.AuthController.RevokeToken(System.String)">
            <summary>
            Revoke refresh token for a specific user.
            </summary>
            <param name="userId">User identifier whose token should be revoked.</param>
            <response code="200">Token revoked successfully.</response>
            <response code="400">Invalid user id supplied or operation failed.</response>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.BankController">
            <summary>
            Controller that manages bank resources.
            </summary>
            <remarks>
            Exposes endpoints to perform CRUD operations on banks and to change their active status.
            All endpoints require authentication and appropriate permissions provided via the <c>PermissionFilterFactory</c>.
            </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the <see cref="T:BankingSystemAPI.Presentation.Controllers.BankController"/> class.
            </summary>
            <param name="mediator">MediatR mediator for dispatching commands/queries.</param>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.GetAll(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retrieves a paginated list of banks.
            </summary>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 10.</param>
            <param name="orderBy">Optional. Property name to sort by. Allowed values: "Id", "Name". If not provided the default ordering may be used by the implementation.</param>
            <param name="orderDirection">Optional. Sort direction: "ASC" or "DESC" (case-insensitive). Defaults to "ASC" when omitted. If an invalid value is supplied the request will return a 400 Bad Request.</param>
            <returns>
            200 OK with a list of banks when successful.
            401 Unauthorized if the caller is not authenticated.
            </returns>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.GetById(System.Int32)">
            <summary>
            Retrieves a bank by its identifier.
            </summary>
            <param name="id">The identifier of the bank to retrieve.</param>
            <returns>
            200 OK with the bank when found.
            404 Not Found when no bank exists with the provided id.
            </returns>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.GetByName(System.String)">
            <summary>
            Retrieves a bank by its name.
            </summary>
            <param name="name">The name of the bank to retrieve.</param>
            <returns>
            200 OK with the bank when found.
            404 Not Found when no bank exists with the provided name.
            </returns>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.Create(BankingSystemAPI.Application.DTOs.Bank.BankReqDto)">
            <summary>
            Creates a new bank.
            </summary>
            <param name="dto">The bank data to create.</param>
            <returns>
            201 Created with the created bank when successful.
            400 Bad Request when the provided data is null or invalid.
            </returns>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.Update(System.Int32,BankingSystemAPI.Application.DTOs.Bank.BankEditDto)">
            <summary>
            Updates an existing bank.
            </summary>
            <param name="id">The identifier of the bank to update.</param>
            <param name="dto">The updated bank data.</param>
            <returns>
            200 OK with success message when successful.
            400 Bad Request when the provided data is null or invalid.
            404 Not Found when no bank exists with the provided id.
            </returns>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.Delete(System.Int32)">
            <summary>
            Deletes a bank by its identifier.
            </summary>
            <param name="id">The identifier of the bank to delete.</param>
            <returns>
            200 OK with success message when the bank was successfully deleted.
            404 Not Found when no bank exists with the provided id.
            </returns>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.BankController.SetActive(System.Int32,System.Boolean)">
            <summary>
            Sets the active status of a bank.
            </summary>
            <param name="id">The identifier of the bank to modify.</param>
            <param name="isActive">Boolean flag indicating whether the bank should be active.</param>
            <returns>
            200 OK with success message when the active status change request is processed.
            404 Not Found may be returned by the implementation if the bank does not exist.
            </returns>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.CheckingAccountController">
            <summary>
            Endpoints to manage checking accounts.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CheckingAccountController.GetAll(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get paginated list of checking accounts.
            </summary>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 10.</param>
            <param name="orderBy">Optional. Property name to sort by. Common values: "Id", "AccountNumber", "UserId", "CreatedDate". If not specified a default order will be applied.</param>
            <param name="orderDirection">Optional. Sort direction: "ASC" or "DESC" (case-insensitive). Defaults to "ASC".</param>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CheckingAccountController.Create(BankingSystemAPI.Application.DTOs.Account.CheckingAccountReqDto)">
            <summary>
            Create a new checking account.
            </summary>
            <remarks>
            Currencies (id => code):
            - 1 => USD
            - 2 => EUR
            - 3 => GBP
            - 4 => EGP
            - 5 => SAR
            </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CheckingAccountController.Update(System.Int32,BankingSystemAPI.Application.DTOs.Account.CheckingAccountEditDto)">
            <summary>
            Update an existing checking account.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.CurrencyController">
            <summary>
            Currency management endpoints.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CurrencyController.GetAll">
            <summary>
            Get all currencies.
            </summary>
            <remarks>
            Returns all currencies. This endpoint does not accept ordering query parameters; a default ordering is applied.
            To sort results use client-side sorting or request ordering support from the API.
            </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CurrencyController.GetById(System.Int32)">
            <summary>
            Get currency by id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CurrencyController.Create(BankingSystemAPI.Application.DTOs.Currency.CurrencyReqDto)">
            <summary>
            Create a new currency.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CurrencyController.Update(System.Int32,BankingSystemAPI.Application.DTOs.Currency.CurrencyReqDto)">
            <summary>
            Update an existing currency.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CurrencyController.Delete(System.Int32)">
            <summary>
            Delete a currency.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.CurrencyController.SetActive(System.Int32,System.Boolean)">
            <summary>
            Set currency active/inactive status.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.RoleClaimsController">
            <summary>
            Role claims management endpoints.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.RoleClaimsController.UpdateRoleClaims(BankingSystemAPI.Application.DTOs.Role.UpdateRoleClaimsDto)">
            <summary>
            Update role claims for a role.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.RoleClaimsController.GetAllClaims">
            <summary>
            Get all role claims grouped by category.
            </summary>
            <remarks>
            Returns role claims grouped by category. This endpoint does not accept ordering query parameters;
            the grouping order is implementation-defined.
            </remarks>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.RoleController">
            <summary>
            Role management endpoints.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.RoleController.GetAllRoles">
            <summary>
            Get all roles.
            </summary>
            <remarks>
            This endpoint returns all roles. It does not accept ordering query parameters; a default ordering
            is applied by the backend. If you need ordering support, please request the feature or use the
            API's pagination to control result sets.
            </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.RoleController.CreateRole(BankingSystemAPI.Application.DTOs.Role.RoleReqDto)">
            <summary>
            Create a new role.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.RoleController.DeleteRole(System.String)">
            <summary>
            Delete a role by id.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.SavingsAccountController">
            <summary>
            Endpoints to manage savings accounts.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.SavingsAccountController.GetAll(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get paginated list of savings accounts.
            </summary>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 10.</param>
            <param name="orderBy">Optional. Property name to sort by. Common values: "Id", "AccountNumber", "UserId", "CreatedDate". If omitted the implementation default ordering is used.</param>
            <param name="orderDirection">Optional. Sort direction: "ASC" or "DESC" (case-insensitive). Defaults to "ASC".</param>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.SavingsAccountController.Create(BankingSystemAPI.Application.DTOs.Account.SavingsAccountReqDto)">
             <summary>
             Create a new savings account.
             </summary>
             The handler will validate that the currency and user exist and are active and will persist
             the new savings account. An account number and CreatedDate are auto-generated.
             <remarks>
             Currencies (id => code):
             - 1 => USD
             - 2 => EUR
             - 3 => GBP
             - 4 => EGP
             - 5 => SAR
            
             Interest Types (value => name):
             - 1 => Monthly (Interest calculated monthly)
             - 2 => Quarterly (Interest calculated quarterly)
             - 3 => Annually (Interest calculated annually)
             </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.SavingsAccountController.Update(System.Int32,BankingSystemAPI.Application.DTOs.Account.SavingsAccountEditDto)">
            <summary>
            Update an existing savings account.
            </summary>
            <remarks>
            Updates editable fields of a savings account such as currency and interest rate. The
            request must not attempt to change the account balance. InterestType values correspond
            to the InterestType enum and are used by the interest calculation job.
            </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.SavingsAccountController.GetAllInterestLogs(System.Int32,System.Int32)">
            <summary>
            Get all interest logs with pagination.
            </summary>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 10.</param>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.SavingsAccountController.GetInterestLogsByAccountId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get all interest logs for a specific account with pagination.
            </summary>
            <param name="accountId">The account identifier whose interest logs are returned.</param>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 10.</param>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.TransactionsController">
            <summary>
            Operations to read transaction history and list transactions.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.TransactionsController.GetTransactionHistory(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get paginated transaction history for an account.
            </summary>
            <param name="accountId">Account identifier whose history will be returned.</param>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 20.</param>
            <param name="orderBy">Optional. Property name to sort by. Defaults to "Timestamp" when not supplied. Common values: "Timestamp", "Amount", "Type".</param>
            <param name="orderDirection">Optional. Sort direction: "ASC" or "DESC" (case-insensitive). Defaults to "DESC" for histories.</param>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.TransactionsController.GetById(System.Int32)">
            <summary>
            Get transaction by id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.TransactionsController.GetAll(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get paginated list of all transactions.
            </summary>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 20.</param>
            <param name="orderBy">Optional. Property name to sort by. Defaults to "Timestamp" when not supplied. Common values: "Timestamp", "Amount", "Type".</param>
            <param name="orderDirection">Optional. Sort direction: "ASC" or "DESC" (case-insensitive). Defaults to "DESC" for transactions listing.</param>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.UserController">
            <summary>
            User management endpoints.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.GetAllUsers(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get all users with pagination.
            </summary>
            <param name="pageNumber">Page number to retrieve. Defaults to 1.</param>
            <param name="pageSize">Number of items per page. Defaults to 10.</param>
            <param name="orderBy">Optional. Property name to sort by. Common values: "Id", "UserName", "Email", "CreatedDate" (exact allowed properties depend on the backing entity). Invalid values may cause a Bad Request.</param>
            <param name="orderDirection">Optional. Sort direction: "ASC" or "DESC" (case-insensitive). Defaults to "ASC" when omitted.</param>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.GetUsersByBankId(System.Int32)">
            <summary>
            Get users by bank id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.GetUserByUsername(System.String)">
            <summary>
            Get user by username.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.GetUserById(System.String)">
            <summary>
            Get user by id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.CreateUser(BankingSystemAPI.Application.DTOs.User.UserReqDto)">
             <summary>
             Create a new user.
             </summary>
             <remarks>
             Roles:
             - SuperAdmin
             - Admin
             - Client
            
             Banks (id => name):
             - 1 => National Bank of Egypt
             - 2 => Banque Misr
             - 3 => Commercial International Bank (CIB)
             - 4 => AlexBank
             </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.UpdateUser(System.String,BankingSystemAPI.Application.DTOs.User.UserEditDto)">
             <summary>
             Update an existing user.
             </summary>
             <remarks>
             Roles:
             - SuperAdmin
             - Admin
             - Client
            
             Banks (id => name):
             - 1 => National Bank of Egypt
             - 2 => Banque Misr
             - 3 => Commercial International Bank (CIB)
             - 4 => AlexBank
            
             Example request body:
             {
               "email": "testuser@example.com",
               "username": "testuser",
               "fullName": "Test User Updated",
               "nationalId": "12345678901234",
               "phoneNumber": "12345678901",
               "dateOfBirth": "2000-01-01"
             }
             </remarks>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.ChangeUserPassword(System.String,BankingSystemAPI.Application.DTOs.User.ChangePasswordReqDto)">
            <summary>
            Change a user's password.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.DeleteUser(System.String)">
            <summary>
            Delete a user by id.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.DeleteUsers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple users.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.GetMyInfo">
            <summary>
            Get current authenticated user's info.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserController.SetActive(System.String,System.Boolean)">
            <summary>
            Set user active/inactive status.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Controllers.UserRolesController">
            <summary>
            Unified endpoint to manage user role assignments.
            Provides a single PUT endpoint that removes old roles and assigns new ones.
            </summary>
        </member>
        <member name="M:BankingSystemAPI.Presentation.Controllers.UserRolesController.UpdateUserRole(System.String,BankingSystemAPI.Application.DTOs.User.UpdateUserRoleRequestDto)">
            <summary>
            Update user role assignment (replaces old roles with new role)
            </summary>
            <param name="userId">The user ID to update roles for</param>
            <param name="updateDto">The new role assignment data</param>
            <returns>Success message indicating the role has been updated</returns>
            <response code="200">Role assignment updated successfully</response>
            <response code="400">Bad request - validation errors or invalid input</response>
            <response code="401">Unauthorized - user not authenticated</response>
            <response code="403">Forbidden - insufficient permissions</response>
            <response code="404">Not found - user does not exist</response>
            <response code="409">Conflict - business rule violation (e.g., cannot assign SuperAdmin role)</response>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            Enhanced middleware to handle infrastructure and system-level exceptions with comprehensive ResultExtensions patterns.
            Optimized for .NET 8 with modern async patterns and performance improvements.
            Business logic errors should be handled via Result pattern in controllers.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Middlewares.RequestTimingMiddleware">
            <summary>
            Middleware that measures the time taken to process each HTTP request and logs it.
            Uses colored console output to stand out from other logs.
            </summary>
        </member>
        <member name="T:BankingSystemAPI.Presentation.Swagger.DefaultResponsesOperationFilter">
            <summary>
            Adds common response codes to operations when they are not already documented.
            Useful for documenting 400/404/409/500 responses across the API.
            </summary>
        </member>
    </members>
</doc>
