using BankingSystemAPI.Application.DTOs.Account;
using BankingSystemAPI.Application.Features.CheckingAccounts.Commands.CreateCheckingAccount;
using BankingSystemAPI.Application.Features.CheckingAccounts.Commands.UpdateCheckingAccount;
using BankingSystemAPI.Application.Features.CheckingAccounts.Queries.GetAllCheckingAccounts;
using BankingSystemAPI.Domain.Constant;
using BankingSystemAPI.Presentation.AuthorizationFilter;
using BankingSystemAPI.Presentation.Helpers;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace BankingSystemAPI.Presentation.Controllers
{
    /// <summary>
    /// Endpoints to manage checking accounts.
    /// Only: GetAll, Create, Update
    /// </summary>
    [Route("api/checking-accounts")]
    [ApiController]
    [Authorize]
    [ApiExplorerSettings(GroupName = "CheckingAccounts")]
    public class CheckingAccountController : ControllerBase
    {
        private readonly IMediator _mediator;

        public CheckingAccountController(IMediator mediator)
        {
            _mediator = mediator;
        }

        /// <summary>
        /// Get paginated list of checking accounts.
        /// </summary>
        /// <response code="200">Returns a page of checking accounts.</response>
        /// <response code="400">Invalid paging parameters.</response>
        /// <response code="401">Unauthorized.</response>
        /// <response code="403">Forbidden.</response>
        /// <response code="400">Bad request.</response>
        [HttpGet]
        [PermissionFilterFactory(Permission.CheckingAccount.ReadAll)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> GetAll(int pageNumber = 1, int pageSize = 10, string? orderBy = null, string? orderDirection = null)
        {
            var allowed = new[] { "Id", "AccountNumber", "Balance", "CreatedDate" };
            if (!OrderByValidator.IsValid(orderBy, allowed))
                return BadRequest($"Invalid orderBy value. Allowed: {string.Join(',', allowed)}");

            var result = await _mediator.Send(new GetAllCheckingAccountsQuery(pageNumber, pageSize, orderBy, orderDirection));
            if (!result.Succeeded) return BadRequest(result.Errors);
            return Ok(new { message = "Checking accounts retrieved successfully.", accounts = result.Value });
        }

        /// <summary>
        /// Create a new checking account.
        /// </summary>
        /// <remarks>
        /// Creates and persists a new checking account for an existing user. The request must include a valid
        /// user id and currency id. The caller must have the appropriate permission. The handler validates
        /// that the target user is active and has a role assigned, and that the currency is active. An
        /// account number is automatically generated by the system and the created account is returned.
        /// 
        /// </remarks>
        /// <response code="201">Account created.</response>
        /// <response code="400">Invalid request.</response>
        /// <response code="401">Unauthorized.</response>
        /// <response code="403">Forbidden.</response>
        /// <response code="409">Conflict.</response>
        [HttpPost]
        [PermissionFilterFactory(Permission.CheckingAccount.Create)]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        public async Task<IActionResult> Create([FromBody] CheckingAccountReqDto req)
        {
            var result = await _mediator.Send(new CreateCheckingAccountCommand(req));
            if (!result.Succeeded) return BadRequest(result.Errors);
            return CreatedAtAction(nameof(GetAll), new { id = result.Value!.Id }, new { message = "Checking account created successfully.", account = result.Value });
        }

        /// <summary>
        /// Update an existing checking account.
        /// </summary>
        /// <remarks>
        /// Updates editable checking account fields such as assigned user, currency and overdraft limit.
        /// The endpoint validates caller authorization and returns the updated account DTO. Balance changes
        /// are not allowed through this endpoint.
        /// </remarks>
        /// <response code="200">Account updated.</response>
        /// <response code="400">Invalid request.</response>
        /// <response code="401">Unauthorized.</response>
        /// <response code="403">Forbidden.</response>
        /// <response code="404">Account not found.</response>
        [HttpPut("{id:int}")]
        [PermissionFilterFactory(Permission.CheckingAccount.Update)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> Update(int id, [FromBody] CheckingAccountEditDto req)
        {
            var result = await _mediator.Send(new UpdateCheckingAccountCommand(id, req));
            if (!result.Succeeded) return BadRequest(result.Errors);
            return Ok(new { message = "Checking account updated successfully.", account = result.Value });
        }
    }
}
